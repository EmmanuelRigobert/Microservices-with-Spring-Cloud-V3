spring.application.name=api-gateway
server.port=8765

#The below command connects the api-gateway service to the naming server. This may not be necessary as the eureka client dependency is already in the pom.xml file
eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka

#The below command enables api-gateway to discover services using the naming server
#spring.cloud.gateway.discovery.locator.enabled=true
#e.g http://localhost:8765/CURRENCY-EXCHANGE/currency-exchange/from/USD/to/INR

#The below command is used to convert the service id to lowercase
#spring.cloud.gateway.discovery.locator.lower-case-service-id=true
#ie. http://localhost:8765/currency-exchange/currency-exchange/from/USD/to/INR

#After implementing ApiGatewayConfiguratoin routing, we can access the currency-exchange service using the below URL. Hence discovery locator is not required
#http://localhost:8765/currency-exchange/from/USD/to/INR

#Distributed tracing is used to trace the flow of requests in a microservices architecture in order to debug and monitor the flow of requests
#To launch Zipkin (Distributed tracing server), we can use the below command.
#docker run -d -p 9411:9411 openzipkin/zipkin:2.23
#url: http://localhost:9411/zipkin/
#Other services would connect to zipkin and sends information about the requests to zipkin
#While Sleuth only provides monitoring,we use Micrometer to connect our services to Zipkin which provides metrics, logs and distributed tracing
#Open telemetry is another tool used to send the info from microservices to Zipkin
#The below commands are used to configure sampling which is used to specify the percentage of requests to be traced. 1.0 means all requests would be traced. 0.5 means 50% of requests would be traced
management.tracing.sampling.probability=1.0
logging.pattern.level=%5p [${spring.application.name:},%X{traceId:-},%X{spanId:-}]

