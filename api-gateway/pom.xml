<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>3.4.3</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.emmanuel.microservices</groupId>
	<artifactId>api-gateway</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>api-gateway</name>
	<description>Demo project for Spring Boot</description>
	<url/>
	<licenses>
		<license/>
	</licenses>
	<developers>
		<developer/>
	</developers>
	<scm>
		<connection/>
		<developerConnection/>
		<tag/>
		<url/>
	</scm>
	<properties>
		<java.version>17</java.version>
		<spring-cloud.version>2024.0.0</spring-cloud.version>
	</properties>
	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId> <!-- Provides routing, security, filters, and load balancing -->
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-gateway</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-netflix-eureka-client</artifactId> <!-- Register with Eureka naming server and load balancing-->
		</dependency>

		<!-- Micrometer is a metrics collection facade  for metrics, logs and monitoring. Zipkin is a distributed tracing system. With help from micrometer, we can monitor, trace and observe the application in zipkin -->
		<dependency>
			<groupId>io.micrometer</groupId>
			<artifactId>micrometer-observation</artifactId>
		</dependency>
		<dependency>
			<groupId>io.micrometer</groupId>
			<artifactId>micrometer-tracing-bridge-otel</artifactId>
		</dependency>
		<dependency>
			<groupId>io.opentelemetry</groupId>
			<artifactId>opentelemetry-exporter-zipkin</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<scope>runtime</scope>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>io.projectreactor</groupId>
			<artifactId>reactor-test</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>
	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-dependencies</artifactId>
				<version>${spring-cloud.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<configuration>
					<image>
						<name>sirraven/microv3-${project.artifactId}:${project.version}</name> <!-- This is the name of the docker image that would be created. I used my docker hub username(docker ID which is sirraven) so that the image can be pushed to my docker hub. The project artifactId is the name of the project and the version is the version of the project which would be used to create the repository name and tag respectively -->
					</image>
					<pullPolicy>IF_NOT_PRESENT</pullPolicy> <!-- This specifies the pull policy for the image. The default value is ALWAYS. The value IF_NOT_PRESENT means that the image would be pulled only if it is not present on the system -->
				</configuration>
			</plugin>
			<!--
			 Creating a docker image using Spring Boot Maven Plugin. This is more efficient than the above methods as it creates the jar file and the docker image in one step
1. Add the below plugin to the pom.xml file
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
		<image>
			<name>emmanuel/microservices/${project.artifactId}:${project.version}</name>
		</image>
	</configuration>
</plugin>
This is commonly found in the pom.xml file of a spring boot application
2. Open edit configurations in the IDE and add the below command to the goals field. Run the configuration to create the docker image
spring-boot:build-image
3. docker image list // to list the docker images on the system
The repository name would be the name of the project and the tag would be the version of the project
4. docker container run -d -p 5000:5000 hello-world-java:0.0.1-SNAPSHOT //This runs the docker image in a container in detached mode and maps the port 5000 on the image to the port 5000 on the container in host/local
			 -->
		</plugins>
	</build>

</project>
