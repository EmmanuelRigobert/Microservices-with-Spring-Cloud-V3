#This is the URL of the Config Server. With help of the config client, we can connect to the config server
spring.application.name=currency-exchange
spring.config.import=optional:configserver:http://localhost:8888
#This allows the service to connect to the repo and get the limit-service properties file

server.port=8000
#By creating run configurations in IDE, we can run multiple instances of the same service on different ports. The port specified in the run configuration would override the port in the application.properties file

#The below command is used to show the SQL queries in the console
spring.jpa.show-sql=true

#The below command is used to create a database in memory
spring.datasource.url=jdbc:h2:mem:testdb

spring.h2.console.enabled=true
#The above command is used to enable the h2 console to view the database

spring.jpa.defer-datasource-initialization=true
# This property is used to delay the datasource initialization until the application is fully started and tables are created.


#The below command connects the currency-exchange service to the naming server. This may not be necessary as the eureka client dependency is already in the pom.xml file
#eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka
#If connecting to the naming server through a docker container, the below command is used
eureka.client.serviceUrl.defaultZone=http://naming-server:8761/eureka
#Or alternatively, we can configure this in the environment variables in the docker-compose.yaml file

#Service failure may be managed via @Retry, @CircuitBreaker, @RateLimiter or @Bulkhead annotations.

#The below command is used to connect configure circuit breaker for the currency-exchange service. This is used to handle failures in the service. After 5 attempts, the service would be stopped and the fallback method would be called
resilience4j.retry.instances.sample-api.maxAttempts=5
#The below command is used to specify the wait duration between each retry
resilience4j.retry.instances.sample-api.waitDuration=1s
#The below command is used to enable exponential backoff. This is used to increase the wait duration between each retry. This is commonly used in production
resilience4j.retry.instances.sample-api.enableExponentialBackoff=true

#The below command is used to specify the number of retries before the state of the circuit breaker is changed to open
resilience4j.circuitbreaker.instances.sample-api.failureRateThreshold=50

#The @RateLimiter annotation is used to limit the number of requests to the service. The below command is used to specify 2 requests allowed per 10 seconds
resilience4j.ratelimiter.instances.default.limitForPeriod=2
resilience4j.ratelimiter.instances.default.limitRefreshPeriod=10s

resilience4j.bulkhead.instances.default.maxConcurrentCalls=10

#Distributed tracing is used to trace the flow of requests in a microservices architecture in order to debug and monitor the flow of requests
#To launch Zipkin (Distributed tracing server), we can use the below command.
#docker run -d -p 9411:9411 openzipkin/zipkin:2.23
#url: http://localhost:9411/zipkin/
#Other services would connect to zipkin and sends information about the requests to zipkin
#While Sleuth only provides monitoring,we use Micrometer to connect our services to Zipkin which provides metrics, logs and distributed tracing
#Open telemetry is another tool used to send the info from microservices to Zipkin
#The below commands are used to configure sampling which is used to specify the percentage of requests to be traced. 1.0 means all requests would be traced. 0.5 means 50% of requests would be traced
management.tracing.sampling.probability=1.0
logging.pattern.level=%5p [${spring.application.name:},%X{traceId:-},%X{spanId:-}]
