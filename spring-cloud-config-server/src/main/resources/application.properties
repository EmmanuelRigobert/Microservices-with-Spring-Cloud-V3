spring.application.name=spring-cloud-config-server
server.port=8888


#First we created the limits-service.properties file in the git-localconfig-repo
#Then we add EnableConfigServer annotation to the main class of the spring-cloud-config-server
#Then we add the below url to connect to the git-localconfig-repo to the config server
spring.cloud.config.server.git.uri=file:///Users/christophernde1/Documents/SirRaven/Web-Micro Services/microservices/git-localconfig-repo
#We can then accesss our limits-service.properties in repo from spring-cloud-config-server at http://localhost:8888/limits-service/default. limits-service is the file name in repo and default is the profile
#With help from the client config client in limits-service, we then connect our limits-service to the config server
#By creating limits-service-dev.properties and limits-service-qa.properties in the git-localconfig-repo, we can access them from the config server different instances of our limits-service at http://localhost:8888/limits-service/dev and http://localhost:8888/limits-service/qa respectively
#With help of profiles, we can configure and access these instances in our limits-service

#Distributed tracing is used to trace the flow of requests in a microservices architecture in order to debug and monitor the flow of requests
#To launch Zipkin (Distributed tracing server), we can use the below command.
#docker run -d -p 9411:9411 openzipkin/zipkin:2.23
#url: http://localhost:9411/zipkin/
#Other services would connect to zipkin and sends information about the requests to zipkin
#We use Micrometer to connect our services to Zipkin which provides metrics, logs and distributed tracing
#Open telemetry is another tool used to send the info from microservices to Zipkin
